openapi: 3.0.0
info:
  title: Item Master
  description: Giorgio Armani Item Master
  version: "1.0.0"
servers:
  - url: '{protocol}://{environment}.armani.it/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      environment:
        default: api    # Production server
        enum:
          - api      # Production server
          - apidev   # Development server
          - apitst   # Test server
paths:
  /item:
    get:
      summary: Returns active items by season-id
      description: Returns active items by season-id
      operationId: ""
      parameters:
        - name: season-id
          in: query
          description: Season values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
            example: "FW22"
        - name: brand-id
          in: query
          description: brand code
          required: false
          explode: true
          schema:
            type: string
            example: "EA"
        - name: category-id
          in: query
          description: category code
          required: false
          explode: true
          schema:
            type: string
            example: "10"
        - name: collection-id
          in: query
          description: collection code
          required: false
          explode: true
          schema:
            type: string
            example: ""
        - name: division-id
          in: query
          description: division code
          required: false
          explode: true
          schema:
            type: string
            example: ""
        - name: seasonality-id
          in: query
          description: seasonality code
          required: false
          explode: true
          schema:
            type: string
            example: ""
        - name: merchandise-category-id
          in: query
          description: merchandise category code
          required: false
          explode: true
          schema:
            type: string
        - name: product-id
          in: query
          description: product code
          required: false
          explode: true
          schema:
            type: string
        - name: model-id
          in: query
          description: model code
          required: false
          explode: true
          schema:
            type: string
        - name: fabric-id
          in: query
          description: fabric code
          required: false
          explode: true
          schema:
            type: string
        - name: color-id
          in: query
          description: color code
          required: false
          explode: true
          schema:
            type: string

        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-end"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-end"
        - $ref: "../common/parameter/pagination.yaml#/parameters/limit"
        - $ref: "../common/parameter/pagination.yaml#/parameters/offset"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"

  /item/{item-id}:
    get:
      summary: Returns active item by {item-id}
      description: Returns active item by {item-id}
      operationId: ""
      parameters:
        - name: item-id
          in: path
          description: item-id (can be both sku or generic-article)
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              example: "XYZ010XOI69 001"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/list"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"

  /item/season/{season-id}/{brand-id}/{gender}/{category-id}:
    get:
      summary: Returns by season-id
      description: Returns view of season/brand/gender/category
      operationId: ""
      parameters:
        season-id:
          - name: season-id
            in: path
            description: "example: /season/FW22"
            required: true
            schema:
              type: string

        brand-id:
          - name: brand-id
            in: path
            description: "example: /season/FW22/10"
            required: false
            schema:
              type: string
        gender:
          - name: gender
            in: path
            description: "example: /season/FW22/10/man"
            required: false
            schema:
              type: string
       category-id:
          - name: category-id
            in: path
            description: "example: /season/FW22/10/man/20"
            required: false
            schema:
              type: string

        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-end"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-end"
        - $ref: "../common/parameter/pagination.yaml#/parameters/limit"
        - $ref: "../common/parameter/pagination.yaml#/parameters/offset"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/view-season"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"

security:
  - api-key-auth: []

components:

  securitySchemes:
    api-key-auth:
      type: apiKey
      in: header
      name: X-Gateway-APIKey

  schemas:

    view-season:
      type: object
      properties:
        season:
          type: string
        brand:
          $ref: "../common/brand.yaml#/components/schemas/brand"
        gender:
          $ref: "../common/gender.yaml#/components/schemas/gender"
        category:
          $ref: "../common/category.yaml#/components/schemas/category"
        items:
          type: array
          items:
            $ref: "item.yaml#/components/schemas/item"
      example:
          season: "FW22"
          brand:
            id: 10
            href: "https://api.armani.it/v1/brand/10"
          gender:
            id: man
          category:
            id: 20
            href: "https://api.armani.it/v1/category/20"
          items:
            - id: "ABC 001"
              href:  "https://api.armani.it/v1/item/ABC 001"
              item-type: generic-article
              sku-item:
                - id: "ABC 00102N"
                  item-type: real-article
                  href: "https://api.armani.it/v1/item/ABC 00102N"
                - id: "ABC 00103N"
                  item-type: real-article
                  href: "https://api.armani.it/v1/item/ABC 00103N"
                - id: "ABC 00104N"
                  item-type: real-article
                  href: "https://api.armani.it/v1/item/ABC 00104N"
            - id: "ZZZ 001"
              href:  "https://api.armani.it/v1/item/ZZZ 001"
              item-type: generic-article
              sku-item:
                - id: "ZZZ 00102N"
                  item-type: real-article
                  href: "https://api.armani.it/v1/item/ZZZ 00102N"
                - id: "ZZZ 00103N"
                  item-type: real-article
                  href: "https://api.armani.it/v1/item/ZZZ 00103N"


    list:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "item.yaml#/components/schemas/item"
