openapi: 3.0.0
info:
  title: Item Master
  description: Giorgio Armani Item Master
  version: "1.0.0"
servers:
  - url: '{protocol}://{environment}.giorgioarmani.it/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      environment:
        default: api    # Production server
        enum:
          - api      # Production server
          - apidev   # Development server
          - apitst   # Test server
paths:
  /item:
    get:
      summary: Returns active items by season
      description: Returns active items by season
      operationId: ""
      parameters:
        - name: season
          in: query
          description: Season values that need to be considered for filter
          required: true
          explode: true
          schema:
            $ref: "../common/season.yaml#/components/schemas/season"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/item"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"

  /item/{item-id}:
    get:
      summary: Returns active item by {item-id}
      description: Returns active item by {item-id}
      operationId: ""
      parameters:
        - name: item-id
          in: path
          description: item-id (can be both sku or generic-article)
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              example: "XYZ010XOI69 001"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/item"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"
security:
  - api-key-auth: []

components:

  securitySchemes:
    api-key-auth:
      type: apiKey
      in: header
      name: X-Gateway-APIKey

  schemas:
    item:
      type: object
      properties:
        id:
          type: string
          example: XYZ010XOI69 001
          description: sku or generic article id
        item-type:
          $ref: "#/components/schemas/item-type"
        href:
          type: string
          format: url
          example: "https://api.giorgioarmani.it/v1/item/XYZ010XOI69 001"
        active-season:
          $ref: "../common/season.yaml#/components/schemas/season"
        creation-season:
          $ref: "../common/season.yaml#/components/schemas/season"
        style:
          $ref: "../common/style.yaml#/components/schemas/style"
        fabric:
          $ref: "../common/fabric.yaml#/components/schemas/fabric"
        variant:
          type: string
          example: ""
        variant-type:
          type: string
          example: ""
        style-fabric-description:
          type: array
          example:
            - language: en
              description: SNK COW SUEDE+CALF V
            - language: it
              description: Vitello V
          items:
            $ref: "../common/localized-message.yaml#/components/schemas/localized-message"
        division:
          $ref: "../common/division.yaml#/components/schemas/division"
        collection:
          $ref: "../common/collection.yaml#/components/schemas/collection"
        theme:
          $ref: "../common/theme.yaml#/components/schemas/theme"
        product:
          $ref: "../common/product.yaml#/components/schemas/product"
        product-type:
          $ref: "../common/product-type.yaml#/components/schemas/product-type"
        product-kind:
          $ref: "../common/product-kind.yaml#/components/schemas/product-kind"
        merchandise-category:
          $ref: "../common/merchandise-category.yaml#/components/schemas/merchandise-category"
        merchandise-group:
          $ref: "../common/merchandise-group.yaml#/components/schemas/merchandise-group"
        category:
          $ref: "../common/category.yaml#/components/schemas/category"
        brand:
          $ref: "../common/brand.yaml#/components/schemas/brand"
        made-in:
          type: array
          items:
            $ref: "../common/made-in.yaml#/components/schemas/made-in"
        fashion-grade:
          $ref: "../common/seasonality.yaml#/components/schemas/seasonality"
        gender:
          $ref: "../common/gender.yaml#/components/schemas/gender"
        rfid-enabled:
          type: boolean
          default: false
        cites:
          $ref: "../common/cites.yaml#/components/schemas/cites"
        underline:
          $ref: "../common/underline.yaml#/components/schemas/underline"
        commodity-code:
          $ref: "../common/commodity-code.yaml#/components/schemas/commodity-code"
        packaging-type:
          $ref: "../common/packaging-type.yaml#/components/schemas/packaging-type"
        range-name:
          $ref: "../common/range-name.yaml#/components/schemas/range-name"
        capsule-special-projects:
          $ref: "../common/capsule-special-projects.yaml#/components/schemas/capsule-special-projects"
        luxury-article:
          $ref: "../common/luxury-article.yaml#/components/schemas/luxury-article"
        status:
          $ref: "../common/item-status.yaml#/components/schemas/item-status"
        creation-date:
          type: string
          format: date-time
        last-change-date:
          type: string
          format: date-time
        composition:
          $ref: "../common/composition.yaml#/components/schemas/composition"
        related-items:
          type: array
          items:
            $ref: "#/components/schemas/real-item"

    real-item:
      type: object
      properties:
        id:
          type: string
          example: XYZ010XOI69 00102N
        item-type:
          $ref: "#/components/schemas/item-type"
        href:
          type: string
          format: url
          example: "https://api.giorgioarmani.it/v1/item/XYZ010XOI69 00102N"
        related-generic-id:
          type: string
          format: url
          example: "XYZ010XOI69 001"
        related-generic-href:
          type: string
          format: url
          example: "https://api.giorgioarmani.it/v1/item/XYZ010XOI69 001"
        size:
          $ref: "../common/size.yaml#/components/schemas/size"
        alias-size:
          $ref: "../common/size.yaml#/components/schemas/size"
        color:
          $ref: "../common/color.yaml#/components/schemas/color"
        drop:
          $ref: "../common/drop.yaml#/components/schemas/drop"
        article-description:
          type: array
          example:
            - language: en
              description: XYZ010 XOI69 A553 SNK COW SUEDE+CALF V
            - language: it
              description: XYZ010 XOI69 A553 Vitello V
          items:
            $ref: "../common/localized-message.yaml#/components/schemas/localized-message"
        barcodes:
          type: array
          items:
              $ref: "../barcode/barcode.yaml#/components/schemas/barcode"
        status:
          $ref: "../common/item-status.yaml#/components/schemas/item-status"
        creation-date:
          type: string
          format: date-time
        last-change-date:
          type: string
          format: date-time


    item-type:
      type: string
      enum:
        - generic-article
        - real-article