openapi: "3.0.0"
info:
  title: Season
  description: Season API
  version: "1.0.0"
servers:
  - url: '{protocol}://{environment}.armani.it/v1'
    variables:
      protocol:
        enum:
          - https
        default: https
      environment:
        default: api    # Production server
        enum:
          - api      # Production server
          - apidev   # Development server
          - apitst   # Test server
paths:
  /seasons:
    get:
      summary: Returns all season for a given item-id
      description: Returns all season for a given item-id
      parameters:
        - name: item-id
          in: query
          description: item-id
          required: true
          explode: true
          schema:
            type: string
            example: "AX94DGT 00101N"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "seasons.yaml#/components/schemas/seasons"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"

  /season/{season-id}:
    get:
      summary: Returns the given season-id
      description: Return descriptions for season-id
      parameters:
        - name: season-id
          in: path
          description: season-id
          required: true
          explode: true
          schema:
            type: string
            example: "FW23"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "../common/season.yaml#/components/schemas/season"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"


  /season/{season-id}/items:
    get:
      summary: Returns all items for a given season-id
      description: Returns all items for a given season-id
      operationId: ''
      parameters:
        - name: season-id
          in: path
          description: season-id
          required: true
          explode: true
          schema:
            type: string
            example: "FW23"
        - name: brand-id
          in: query
          description: brand-id
          required: false
          explode: true
          schema:
            type: string
            example: "EA7"
        - name: gender
          in: query
          description: gender
          required: false
          explode: true
          schema:
            type: string
            example: 30
        - name: category-id
          in: query
          description: category-id
          required: false
          explode: true
          schema:
            type: string
            example: 10
        - name: collection-id
          in: query
          description: collection code
          required: false
          explode: true
          schema:
            type: string
            example: ""
        - name: seasonality-id
          in: query
          description: seasonality code
          required: false
          explode: true
          schema:
            type: string
            example: ""
        - name: merchandise-category-id
          in: query
          description: merchandise category code
          required: false
          explode: true
          schema:
            type: string
        - name: product-id
          in: query
          description: product code
          required: false
          explode: true
          schema:
            type: string
        - name: customer-code
          in: query
          description: customer master code (invoice customer code), if you want to filter for items orderd by the given customer code
          required: false
          explode: true
          schema:
            type: string
            example: "5855.BO"
        - name: item-category-id
          in: query
          description: item-category
          required: false
          explode: true
          schema:
            type: string

        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/creation-date-end"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-start"
        - $ref: "../common/parameter/date-range.yaml#/parameters/last-change-date-end"
        - $ref: "../common/parameter/pagination.yaml#/parameters/limit"
        - $ref: "../common/parameter/pagination.yaml#/parameters/offset"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "season-items.yaml#/components/schemas/season-items"
        "401":
          description: Unauthorized Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/unauthorized-error"
        "default":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "../error/error.yaml#/components/schemas/error"



security:
  - api-key-auth: []

components:

  securitySchemes:
    api-key-auth:
      type: apiKey
      in: header              # can be "header", "query" or "cookie"
      name: X-Gateway-APIKey  # name of the header, query parameter or cookie

  schemas:

    season:
      $ref: "../common/season.yaml#/components/schemas/season"




